

@model Memcomb.Models.Memory

	<link href="@Url.Content("~/Content/HomePage.css")" rel="stylesheet" type="text/css" />

	<body>
			<!-- Create Memory Modal -->

			<!-- Trigger/Open The Modal -->
			<button id="myBtn" class="createMemoryBtn">Create Memory</button>

			<!-- The Modal -->
			<div id="myModal" class="modal">

				<!-- Modal content -->
				<div class="modal-content">
					@using (Html.BeginForm("Index", "HomePage", FormMethod.Post, new { enctype = "multipart/form-data" }))
					{
						@Html.AntiForgeryToken()

						var fragIndex = 1;

						if (fragIndex <= 3)
						{
							
						<div class="col-md-12">
							<div class="form-horizontal">
								<div class="form-group col-md-12">
									@Html.EditorFor(model => model.Memory_Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Memory Title" } })
									@Html.EditorFor(model => model.Memory_Description, new { htmlAttributes = new { @class = "form-control", placeholder = "Memory Description" } })
								</div>
								<div class="form-group col-md-12">
									<div class="form-inline">
										<div class="btn btn-primary">
											@Html.TextBoxFor(model => model.fragmentList[fragIndex].getImagePath, new { @class = "form-control", type = "file", id = "imageBrowes" })
										</div>
										<span>
											<input type="submit" value="Post Memory!" class="btn" />
										</span>
										<span id="createMemoryClose" class="close">&times;</span>
									</div>
									<div>
										<input type="button" id="button" onclick="duplicate()" value="Add Image" class="btn"/>
									</div>

									<hr />
								</div>
								<div class="form-inline">
									<div id="duplicator" class="form-group col-md-3">
										
										
										<div id="imgPreview" class="thumbnail" style="display:none">
											<img id="targetImg" class="img-responsive" />
											<div class="caption">
												@Html.EditorFor(model => model.fragmentList[fragIndex].Fragment_Location, new { htmlAttributes = new { @class = "form-control", id = "memoryLocation", placeholder = "City, State" } })
												@Html.EditorFor(model => model.fragmentList[fragIndex].Fragment_Date, new { htmlAttributes = new { @class = "form-control", id = "memoryDate", placeholder = "mm/dd/yyyy" } })
												@Html.EditorFor(model => model.fragmentList[fragIndex].Memory_Description, new { htmlAttributes = new { @class = "form-control", id = "memoryCaption", placeholder = "Caption" } })
												<br /><span id="highlight">Make this your highlight? @Html.EditorFor(model => model.fragmentList[fragIndex].Is_Highlight)</span><br />
												<a href="#" onclick="ClearPreview()"><i class="glyphicon glyphicon-trash"></i></a>
												<span id="description"></span>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						}
					}
					</div>
			</div>
		<!-- End Of Create Memory Modal -->
	</body>


	<script>
		
		// Get the modal
		var modal = document.getElementById("myModal"); // Create Memory Modal

		// Get the button that opens the modal
		var btn = document.getElementById("myBtn"); // Create Memory Modal

		// Get the <span> element that closes the modal
		var span = document.getElementById("createMemoryClose");

		// When the user clicks the button, open the modal
		btn.onclick = function () {
			modal.style.display = "block";
		}

		// When the user clicks on <span> (x), close the modal
		span.onclick = function () {
			modal.style.display = "none";
		}

		// When the user clicks anywhere outside of the modal, close it
		window.onclick = function (event) {
			if (event.target == modal) {
				modal.style.display = "none";
			}
		}

	</script>

	<script src="~/Scripts/jquery-3.4.1.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
	<script src="https://requirejs.org/docs/release/2.3.5/minified/require.js"></script>
	<script>

		// Start of upload Memories
		var i = 0;

		$(document).ready(function () {
			$("#imageBrowes").change(function () {
				var File = this.files;

				if (File && File[0]) {
					ReadImage(File[0]);
				}

			})
		})

		var ReadImage = function (file) {

			var reader = new FileReader;
			var image = new Image;

			reader.readAsDataURL(file);
			reader.onload = function (_file) {

				image.src = _file.target.result;
				image.onload = function () {

					var height = this.height;
					var width = this.width;
					var type = file.type;
					var size = ~~(file.size / 1024) + "KB";

					$("#targetImg").attr('src', _file.target.result);
					$("#description").text("Size:" + size + ", " + height + "X" + width + " " + type + "");
					$("#imgPreview").show();
				}
			}
		}

		var divDuplicator = document.getElementById('duplicator');

		function duplicate() {
			var clone = divDuplicator.cloneNode(true); // "deep" clone
			clone.id = "targetImg" + ++i;
			// or clone.id = ""; if the divs don't need an ID
			divDuplicator.parentNode.appendChild(clone);
		}

		var ClearPreview = function () {
			$("#imageBrowes").val("");
			//$("#description" + i).text("");
			//$("#imgPreview" + i).hide();

			$(document).on("click", "#targetImg" + i, function () {
				$(this).remove();
			})

			i = i - 1;
		}
		// End of Memory Upload

	</script>