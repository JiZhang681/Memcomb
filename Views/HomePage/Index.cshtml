
@{
	ViewBag.Title = "Index";
}

<link href="@Url.Content("~/Content/HomePage.css")" rel="stylesheet" type="text/css" />

@model Memcomb.Models.Fragment

<body class="body">
	<!-- Trigger/Open The Modal -->
	<button id="myBtn" class="createMemoryBtn">Create Memory</button>

	<!-- The Modal -->
	<div id="myModal" class="modal">

		<!-- Modal content -->
		<div class="modal-content">

			@using (Html.BeginForm())
			{
				@Html.AntiForgeryToken()
				<div class="col-md-12">
					<div class="form-horizontal">
						<div class="form-group col-md-12">
							<div class="form-inline">
								<div class="btn btn-primary">
									<input type="file" id="imageBrowes" />
								</div>
								<span>
									<input type="submit" value="Post Memory!" class="btn" />
								</span>
								<span class="close">&times;</span>
							</div>
							<div>
								<input type="button" id="button" onclick="duplicate()" value="Add Another Image" class="btn" />
							</div>

							<hr />
						</div>
						<div class="form-inline">
							<div id="duplicator" class="form-group col-md-3">
								<div id="imgPreview" class="thumbnail" style="display:none">
									<img id="targetImg" class="img-responsive" />
									<div class="caption">
										@Html.EditorFor(model => model.Fragment_Location, new { htmlAttributes = new { @class = "form-control", id = "memoryLocation", placeholder = "City, State" } })
										<!--<input type="text" id="memoryLocation" placeholder="City, State" />-->
										@Html.EditorFor(model => model.Fragment_Date, new { htmlAttributes = new { @class = "form-control", id = "memoryDate", placeholder = "mm/dd/yyyy" } })
										<!----<input type="text" id="memoryDate" placeholder="mm/dd/yyyy" />-->
										<!----<textarea type="text" id="memoryCaption" placeholder="Your Caption" maxlength="300" rows="5" cols="50" class="descriptionInput"></textarea>-->
										@Html.EditorFor(model => model.Memory_Description, new { htmlAttributes = new { @class = "form-control", id = "memoryCaption", placeholder = "Caption" } })
										<br /><span id="highlight">Make this your highlight? @Html.EditorFor(model => model.Is_Highlight)</span><br />
										<a href="#" onclick="ClearPreview()"><i class="glyphicon glyphicon-trash"></i></a>
										<span id="description"></span>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
</body>

<script>
	// Get the modal
	var modal = document.getElementById("myModal");

	// Get the button that opens the modal
	var btn = document.getElementById("myBtn");

	// Get the <span> element that closes the modal
	var span = document.getElementsByClassName("close")[0];

	// When the user clicks the button, open the modal
	btn.onclick = function () {
		modal.style.display = "block";
	}

	// When the user clicks on <span> (x), close the modal
	span.onclick = function () {
		modal.style.display = "none";
	}

	// When the user clicks anywhere outside of the modal, close it
	window.onclick = function (event) {
		if (event.target == modal) {
			modal.style.display = "none";
		}
	}
</script>

<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script>

	var i = 0;

	$(document).ready(function () {
		$("#imageBrowes").change(function () {
			var File = this.files;

			if (File && File[0]) {
				ReadImage(File[0]);
			}

		})
	})

	var ReadImage = function (file) {

		var reader = new FileReader;
		var image = new Image;

		reader.readAsDataURL(file);
		reader.onload = function (_file) {

			image.src = _file.target.result;
			image.onload = function () {

				var height = this.height;
				var width = this.width;
				var type = file.type;
				var size = ~~(file.size / 1024) + "KB";

				$("#targetImg").attr('src', _file.target.result);
				$("#description").text("Size:" + size + ", " + height + "X" + width + " " + type + "");
				$("#imgPreview").show();
			}
		}
	}

	$(document).ready(function () {
		$("#saveToDB").click(function () {
			$.ajax(
				{
					type: "POST", //HTTP POST Method
					url: "HomePage/Index", // Controller/View
					data: { //Passing data
						Fragment_Data: $("#targetImg" + i).val(), //Reading text box values using Jquery
						Fragment_Date: $("#memoryDate" + i).val(),
						Memory_Description: $("#memoryCaption" + i).val(),
						Fragment_Location: $("#memoryLocation" + i).val(),
						Is_Highlight: $("#highlight" + i).val()

					}

				});
		});
	});

	var divDuplicator = document.getElementById('duplicator');

	function duplicate() {
		var clone = divDuplicator.cloneNode(true); // "deep" clone
		clone.id = "targetImg" + ++i;
		// or clone.id = ""; if the divs don't need an ID
		divDuplicator.parentNode.appendChild(clone);
	}

	var ClearPreview = function () {
		$("#imageBrowes").val("");
		//$("#description" + i).text("");
		//$("#imgPreview" + i).hide();

		$(document).on("click", "#targetImg" + i, function () {
			$(this).remove();
		})

		i = i - 1;
	}

</script>

<div class="navbar navbar-inverse navbar-fixed-top">
	<div class="container">
		<div class="navbar-header">
			<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
			</button>
			@Html.ActionLink("Memcomb", "Index", "LogInPage", new { area = "" }, new { @class = "navbar-brand" })
		</div>
		<div class="navbar-collapse collapse">
			<ul class="nav navbar-nav">
				<li>@Html.ActionLink("Home", "Index", "HomePage")</li>
				<li>@Html.ActionLink("Notifications", "About", "HomePage")</li>
				<li>@Html.ActionLink("Messages", "Index", "HomePage")</li>
				<li>@Html.ActionLink("Profile", "Index", "Profile")</li>
				<li>@Html.ActionLink("Settings", "Index", "Settings")</li>
			</ul>
		</div>
	</div>
</div>

