@using Memcomb;
@model IEnumerable<Memcomb.Models.User>

@{
	ViewBag.Title = "Index";
}

<link href="@Url.Content("~/Content/HomePage.css")" rel="stylesheet" type="text/css" />

<body class="body">

	<!-- Start of homepage memories -->
	<div>

		@foreach (var user in Model.Reverse())
		{
			foreach (var mem in user.memoryList.Where(a => a.User_ID == user.User_ID))
			{
				foreach (var frag in mem.fragmentList.Where(a => a.Memory_ID == mem.Memory_ID))
				{
					var res = frag.Fragment_Data.Replace(@"C:\Users\17347\Desktop\Capstone Project\Github\MemcombRepo\Memcomb", ""); //Need to set this to work for server
					var setImage = res.Replace(@"\", "/");
					var memoryID = frag.Memory_ID;

					<div>
						<br /><br />

						<div class="displayMemoryBackground">

							<span id="profileUserID_" class="profilePicAndUserName">
								<img src="~/Images/memcombLogo.png" id="memoryHighlight" class="profilePic" /> <!-- Will eventually change the profile pic image source -->
								<span class="userName">
									@Html.DisplayFor(Model => user.First_Name)
									@Html.DisplayFor(Model => user.Last_Name)
								</span>
							</span>
							<div class="memoryTitle">
								@Html.DisplayFor(Model => mem.Memory_Title)
							</div>
							<div class="memoryDescription">
								@Html.DisplayFor(Model => mem.Memory_Description)
							</div>

							<hr class="hrColor" />
							<!-- Trigger/Open The Modal -->
							<div class="displayMemoryBtn">

								<button class="displayMemoryBtnBackground" id="@memoryID" onClick="viewMemoryBtn(this.id)">
									<img class="memoryHighlight" src="@setImage">

									@if ((bool)frag.Is_Highlight == true)// ask why it fails under true, or just doesn't work in general
									{
										//<img class="memoryHighlight" src="@setImage">
									}
								</button>

							</div>


							<!-- The Modal -->
							<div id="theMemories_@memoryID" class="displayMemoryModal">

								<!-- Modal content -->
								<div class="displayMemoryModal-content">
									<span id="@memoryID" onClick="theMemoriesModalClose()" class="displayMemoryClose">&times;</span>
									<div class="fragmentBlock">

										<button class="showFullImg" onclick="expandImg(this.id)" id="@setImage">
											<img class="fragmentImg" src="@setImage" />
										</button>

										<div class="fragmentDescription">
											<div>
												@Html.DisplayFor(model => frag.Fragment_Location)
											</div>
											<div>
												@Html.DisplayFor(model => frag.Fragment_Date)
											</div>
											<div>
												@Html.DisplayFor(model => frag.Memory_Description)
											</div>
										</div>
									</div>
								</div>
									<!-- The Modal -->
								<div id="myImgModal_@setImage" class="ImgModal">

									<!-- Modal Content (The Image) -->
									<img class="ImgModal-content" id="img01">

									<!-- The Close Button -->
									<span onclick="imgModalClose()" class="close">&times;</span>
								</div>
							</div>
						</div>
					</div>
				}
			}
		}
		<hr />
	</div>

	<!-- End of homepage memories -->

</body>

<script>

	// Begin modal for Memories

	// Get the modal
	var theMemoriesModal;
	var clicked_id;

	// When the user clicks the button, open the modal
	function viewMemoryBtn(id)
	{
		clicked_id = id;
		theMemoriesModal = document.getElementById("theMemories_" + clicked_id);
		theMemoriesModal.style.display = "block";
	}

	// When the  user clicks on <span> (x), close the modal
	function theMemoriesModalClose() {
		theMemoriesModal.style.display = "none";
	}

	// When the user clicks anywhere outside of the modal, close it
	window.addEventListener("click", function (event) {
		if (event.target == theMemoriesModal) {
			theMemoriesModal.style.display = "none";
		}
	});

	// End modal for Memories

	// Begin modal for img expand

	// Get the modal
	var imgModal;

	// Get the image and insert it inside the modal - use its "alt" text as a caption
	var modalImg = document.getElementById("img01");

	function expandImg(img) {
		imgModal = document.getElementById("myImgModal_" + img);
		imgModal.style.display = "block";
		modalImg.src = img;
		
	}

	// When the user clicks on <span> (x), close the modal
	function imgModalClose() {
		imgModal.style.display = "none";
	}

	// End modal for img expand

</script>

<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script src="https://requirejs.org/docs/release/2.3.5/minified/require.js"></script>
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

<div class="navbar navbar-inverse navbar-fixed-top">
	<div class="container">
		<div class="navbar-header">
			<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
			</button>
			@Html.ActionLink("Memcomb", "Index", "LogInPage", new { area = "" }, new { @class = "navbar-brand" })
		</div>
		<div class="navbar-collapse collapse">
			<ul class="nav navbar-nav">
				<li>@Html.ActionLink("Home", "Index", "HomePage")</li>
				<li>@Html.ActionLink("Notifications", "About", "HomePage")</li>
				<li>@Html.ActionLink("Messages", "Index", "HomePage")</li>
				<li>@Html.ActionLink("Profile", "Index", "Profile")</li>
				<li>@Html.ActionLink("Settings", "Index", "Settings")</li>
				<li>
					@{Html.RenderPartial("_CreateMemory", new Memcomb.Models.Memory());}
				</li>
			</ul>
		</div>
	</div>
</div>

